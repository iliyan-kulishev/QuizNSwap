@model FolderDetails

@{
    ViewData["Title"] = "Index";
}

@if (!Model.Empty)
{
    <header class="folder-header">
        <div class="folder-header__container">
            <p class="folder-header__count">@Model.TopicCount @((Model.TopicCount > 1 || Model.TopicCount == 0) ? "topics" : "topic")</p>
            <div class="folder-header__title">
                <h1 id="folderNameArea"class="folder-header__name">@Model.FolderName</h1>
                <div class="folder-header__icons">
                    <span id="icon_delete" class="icon-delete"></span>
                    <span id="icon_rename" class="icon-createmode_editedit"></span>
                    <span style="display:none" id="icon_save" class="">SAVE</span>
                </div>
            </div>
        </div>
    </header>
    <div class="wrapper--folder folder-view wrapper--dashboard">

        <div class="folder-views__topics">
            <ul class="grid">
                @foreach (FolderDetails.Topic topic in Model.Topics)
                {
                    <li class="topic-component">
                        <div class="topic-component__div">
                            <p class="topic-component__number">@topic.QuestionCardCount @((topic.QuestionCardCount > 1 || topic.QuestionCardCount == 0) ? "questions" : "question")</p>
                            <h6 class="topic-component__name">@topic.Name</h6>
                        </div>
                    </li>
                }

            </ul>
        </div>

    </div>
}




<script>
    const renameIcon = document.getElementById("icon_rename");
    const saveIcon = document.getElementById("icon_save");
    const folderNameArea = document.getElementById("folderNameArea");

    //SWITCH RENAME AND SAVE ICONS
    renameIcon.addEventListener("click", () =>
    {
        if (saveIcon.style.display === "none")
        {
            saveIcon.style.display = "block";
            renameIcon.style.display = "none";

            //make the folder name area editable
            folderNameArea.contentEditable = "true";

        } else {
            saveIcon.style.display = "none";
        }
    });

    //SAVE ICON CLICK LISTENER + UPDATE NAME
    saveIcon.addEventListener("click", () =>
    {
        const folderNameText = folderNameArea.innerText;

        const uriRename = "/api/folder/?id=" + @Model.Id + "&folderName=" + folderNameText;
        console.log(uriRename);

        fetch(uriRename,
            {
                method: "PUT"
            })
            .then((response) => {
                console.log(response);
                if (response.status == "500")
                {
                    location.reload();                
                }
            })
            .catch(error => console.error('Unable to delete folder.', error));
    });


    //DELETE FOLDER
    const delIcon = document.getElementById("icon_delete");
    const uriDelete = "/api/folder/" + @Model.Id;


    delIcon.addEventListener("click", () => {
        console.log(uriDelete);

        fetch(uriDelete,
            {
                method: "DELETE",
            })
            .then((response) => {
                console.log(response);
                window.location = "/dashboard";
            })
            .catch(error => console.error('Unable to delete folder.', error));
    });
</script>
